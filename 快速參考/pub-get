透過pub get 下載 pubspec.yaml中相依相關packages,
假如system cache中沒有這個package,會一併更新system cache,最後並且會產出或更新
一個system chache package對應檔 .packages 
當你在程式中需要用到這些packages時只要 import 進來就可以用了
    
    import 'package:test/test.dart';

同時pub get也會鎖上當前可用的package狀態紀錄並產出 lockfile, 這個檔案需要背版控,
另外上production時 lockfile 不應該帶上library package


pub get 再遇到相依的package並未 locked的情況時,會取得滿足現行狀態相依的最新版本,這與
pub upgrade 總是取得最新版本的狀況不一樣


 .packages 會是 package 名稱與package 路徑的對應 (packagename to location URIs)
  .packages 檔案, packages 目錄 , .dart_tool目錄都不需要版控管理




pub get --offline 從快取中加入 package, 可離線用,沒有網路IO
就算是線上有了新的 package時,lockfile也不會更新,因為是抓取cache的 package,
記得下次連上網路時要先 pub upgrade 一下


在 pubspec中移除 package時 , pub get 也會一併移除這些package及相關相依的(transitive) package.



Don’t commit the following files and directories created by pub

    .dart_tool/
    .packages
    build/
    pubspec.lock  // Except for application packages
    doc/api/      // API documentation directory created by dartdoc

    *.iml         // IntelliJ
    *.ipr         // IntelliJ
    *.iws         // IntelliJ
    .idea/        // IntelliJ
    .DS_Store     // Mac

    *.dart.js
    *.info.json      # Produced by the --dump-info flag.
    *.js             # When generated by dart2js. Don't specify *.js if your
                     # project includes source files written in JavaScript.
    *.js_
    *.js.deps
    *.js.map